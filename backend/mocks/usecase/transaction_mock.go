// Code generated by MockGen. DO NOT EDIT.
// Source: interface/usecase/transaction_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "budget-book/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionUseCaseInterface is a mock of TransactionUseCaseInterface interface.
type MockTransactionUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUseCaseInterfaceMockRecorder
}

// MockTransactionUseCaseInterfaceMockRecorder is the mock recorder for MockTransactionUseCaseInterface.
type MockTransactionUseCaseInterfaceMockRecorder struct {
	mock *MockTransactionUseCaseInterface
}

// NewMockTransactionUseCaseInterface creates a new mock instance.
func NewMockTransactionUseCaseInterface(ctrl *gomock.Controller) *MockTransactionUseCaseInterface {
	mock := &MockTransactionUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUseCaseInterface) EXPECT() *MockTransactionUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionUseCaseInterface) CreateTransaction(transactionType entity.TransactionType, amount float64, categoryID uint64, transactionDate time.Time, memo string) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transactionType, amount, categoryID, transactionDate, memo)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) CreateTransaction(transactionType, amount, categoryID, transactionDate, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).CreateTransaction), transactionType, amount, categoryID, transactionDate, memo)
}

// DeleteTransaction mocks base method.
func (m *MockTransactionUseCaseInterface) DeleteTransaction(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) DeleteTransaction(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).DeleteTransaction), id)
}

// GetAllTransactions mocks base method.
func (m *MockTransactionUseCaseInterface) GetAllTransactions() ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions")
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) GetAllTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).GetAllTransactions))
}

// GetTransactionByID mocks base method.
func (m *MockTransactionUseCaseInterface) GetTransactionByID(id uint64) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", id)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) GetTransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).GetTransactionByID), id)
}

// GetTransactionsByCategory mocks base method.
func (m *MockTransactionUseCaseInterface) GetTransactionsByCategory(categoryID uint64) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByCategory", categoryID)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByCategory indicates an expected call of GetTransactionsByCategory.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) GetTransactionsByCategory(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByCategory", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).GetTransactionsByCategory), categoryID)
}

// GetTransactionsByDateRange mocks base method.
func (m *MockTransactionUseCaseInterface) GetTransactionsByDateRange(startDate, endDate time.Time) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByDateRange", startDate, endDate)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByDateRange indicates an expected call of GetTransactionsByDateRange.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) GetTransactionsByDateRange(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByDateRange", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).GetTransactionsByDateRange), startDate, endDate)
}

// GetTransactionsByMonth mocks base method.
func (m *MockTransactionUseCaseInterface) GetTransactionsByMonth(year, month int) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByMonth", year, month)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByMonth indicates an expected call of GetTransactionsByMonth.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) GetTransactionsByMonth(year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByMonth", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).GetTransactionsByMonth), year, month)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionUseCaseInterface) UpdateTransaction(id uint64, transactionType entity.TransactionType, amount float64, categoryID uint64, transactionDate time.Time, memo string) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", id, transactionType, amount, categoryID, transactionDate, memo)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionUseCaseInterfaceMockRecorder) UpdateTransaction(id, transactionType, amount, categoryID, transactionDate, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionUseCaseInterface)(nil).UpdateTransaction), id, transactionType, amount, categoryID, transactionDate, memo)
}
