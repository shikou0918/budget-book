// Code generated by MockGen. DO NOT EDIT.
// Source: interface/repository/transaction_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "budget-book/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepositoryInterface is a mock of TransactionRepositoryInterface interface.
type MockTransactionRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryInterfaceMockRecorder
}

// MockTransactionRepositoryInterfaceMockRecorder is the mock recorder for MockTransactionRepositoryInterface.
type MockTransactionRepositoryInterfaceMockRecorder struct {
	mock *MockTransactionRepositoryInterface
}

// NewMockTransactionRepositoryInterface creates a new mock instance.
func NewMockTransactionRepositoryInterface(ctrl *gomock.Controller) *MockTransactionRepositoryInterface {
	mock := &MockTransactionRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepositoryInterface) EXPECT() *MockTransactionRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionRepositoryInterface) Create(transaction *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) Create(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).Create), transaction)
}

// Delete mocks base method.
func (m *MockTransactionRepositoryInterface) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockTransactionRepositoryInterface) GetAll() ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).GetAll))
}

// GetByCategory mocks base method.
func (m *MockTransactionRepositoryInterface) GetByCategory(categoryID uint64) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", categoryID)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) GetByCategory(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).GetByCategory), categoryID)
}

// GetByDateRange mocks base method.
func (m *MockTransactionRepositoryInterface) GetByDateRange(startDate, endDate time.Time) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDateRange", startDate, endDate)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDateRange indicates an expected call of GetByDateRange.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) GetByDateRange(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDateRange", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).GetByDateRange), startDate, endDate)
}

// GetByID mocks base method.
func (m *MockTransactionRepositoryInterface) GetByID(id uint64) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).GetByID), id)
}

// GetByMonth mocks base method.
func (m *MockTransactionRepositoryInterface) GetByMonth(year, month int) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMonth", year, month)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMonth indicates an expected call of GetByMonth.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) GetByMonth(year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMonth", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).GetByMonth), year, month)
}

// Update mocks base method.
func (m *MockTransactionRepositoryInterface) Update(transaction *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) Update(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).Update), transaction)
}
