// Code generated by MockGen. DO NOT EDIT.
// Source: interface/repository/category_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "budget-book/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCategoryRepositoryInterface is a mock of CategoryRepositoryInterface interface.
type MockCategoryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryInterfaceMockRecorder
}

// MockCategoryRepositoryInterfaceMockRecorder is the mock recorder for MockCategoryRepositoryInterface.
type MockCategoryRepositoryInterfaceMockRecorder struct {
	mock *MockCategoryRepositoryInterface
}

// NewMockCategoryRepositoryInterface creates a new mock instance.
func NewMockCategoryRepositoryInterface(ctrl *gomock.Controller) *MockCategoryRepositoryInterface {
	mock := &MockCategoryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepositoryInterface) EXPECT() *MockCategoryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepositoryInterface) Create(category *entity.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) Create(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).Create), category)
}

// Delete mocks base method.
func (m *MockCategoryRepositoryInterface) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockCategoryRepositoryInterface) GetAll() ([]*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockCategoryRepositoryInterface) GetByID(id uint64) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).GetByID), id)
}

// GetByType mocks base method.
func (m *MockCategoryRepositoryInterface) GetByType(categoryType entity.TransactionType) ([]*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", categoryType)
	ret0, _ := ret[0].([]*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) GetByType(categoryType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).GetByType), categoryType)
}

// Update mocks base method.
func (m *MockCategoryRepositoryInterface) Update(category *entity.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) Update(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).Update), category)
}
